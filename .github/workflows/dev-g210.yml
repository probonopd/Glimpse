name: Glimpse Dev Sanity Check CI

# Triggers the workflow on push or pull request events, but only for the dev-g210 branch
on:
  push:
    branches: [ patch-1 ]
  pull_request:
    branches: [ patch-1 ]

jobs:
  build-linux-dev:
    runs-on: ubuntu-20.04
          
    steps:
    - uses: actions/checkout@v2
      with:
        path: Glimpse
      
    - name: Set up Ubuntu 20.04 runner
      run: |
        sudo sed -i '/deb-src/s/^# //' /etc/apt/sources.list
        sudo apt-get --quiet update --yes
            
    - name: Install build tools
      run: sudo apt-get --quiet install --yes build-essential git python3 python3-pip python3-setuptools python3-wheel ninja-build libgirepository1.0-dev valac libasound2-plugins appstream

    - name: Install build dependencies
      run: sudo apt-get --quiet build-dep gimp
      
    - name: Install meson
      run: yes | sudo pip3 install meson
      
    - name: Set global environment variables
      run: |
        echo ::set-env name=SRC_PREFIX::${{ github.workspace }}
        echo ::set-env name=INSTALL_PREFIX::${{ github.workspace }}/glimpse-prefix
        echo ::set-env name=ARCH::"$(dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null)"
        
    - name: Set build environment variables
      run: |
        echo ::set-env name=PKG_CONFIG_PATH::$INSTALL_PREFIX/lib/pkgconfig:$INSTALL_PREFIX/lib/$ARCH/pkgconfig:$INSTALL_PREFIX/share/pkgconfig:$PKG_CONFIG_PATH
        echo ::set-env name=LD_LIBRARY_PATH::$INSTALL_PREFIX/lib:$INSTALL_PREFIX/lib/$ARCH:$LD_LIBRARY_PATH
        echo ::set-env name=ACLOCAL_FLAGS::"-I $INSTALL_PREFIX/share/aclocal $ACLOCAL_FLAGS"
        echo ::set-env name=XDG_DATA_DIRS::$INSTALL_PREFIX/share:/usr/local/share:/usr/share
        echo ::set-env name=PATH::$HOME/.local/bin:$INSTALL_PREFIX/bin:$PATH
    
    - name: Clone BABL 0.1.78 from GNOME gitlab server
      run: git clone --depth=1 --branch BABL_0_1_78 https://gitlab.gnome.org/GNOME/babl.git $SRC_PREFIX/babl
      
    - name: Clone MyPaint-Brushes 1.3.1 from Github
      run: git clone --depth=1 --branch v1.3.1 https://github.com/mypaint/mypaint-brushes.git $SRC_PREFIX/mypaint-brushes
      
    - name: Clone LibMyPaint 1.5.1 from Github
      run: git clone --depth=1 --branch v1.5.1 https://github.com/mypaint/libmypaint.git $SRC_PREFIX/libmypaint
      
    - name: Clone GEGL 0.4.22 from GNOME gitlab server
      run: git clone --depth=1 --branch GEGL_0_4_22 https://gitlab.gnome.org/GNOME/gegl.git $SRC_PREFIX/gegl
      
    - name: Create install prefix
      run: |
        mkdir -p $INSTALL_PREFIX/share/aclocal
      
    - name: Build BABL
      run: |
        cd $SRC_PREFIX/babl
        meson builddir --prefix=$INSTALL_PREFIX --buildtype=release -Db_lto=true -Dwith-docs=false
        cd $SRC_PREFIX/babl/builddir
        ninja && ninja install
        
    - name: Build mypaint-brushes
      run: |
        cd $SRC_PREFIX/mypaint-brushes
        ./autogen.sh --prefix=$INSTALL_PREFIX
        ./configure --prefix=$INSTALL_PREFIX
        make && make install
    
    - name: Build libmypaint
      run: |
        cd $SRC_PREFIX/libmypaint
        ./autogen.sh --prefix=$INSTALL_PREFIX
        ./configure --prefix=$INSTALL_PREFIX
        make && make install
        
    - name: Build GEGL
      run: |
        cd $SRC_PREFIX/gegl
        meson builddir --prefix=$INSTALL_PREFIX --buildtype=release -Db_lto=true -Ddocs=false
        cd $SRC_PREFIX/gegl/builddir
        ninja && ninja install
        
    - name: Build in-development version of Glimpse Image Editor
      run: |
        cd $SRC_PREFIX/Glimpse
        ./autogen.sh --prefix=$INSTALL_PREFIX --disable-gtk-doc --disable-gtk-doc-html --without-webkit --without-xvfb-run --disable-python --disable-check-update
        make && make install
        
    - name: Create AppImage
      run: |
        mkdir -p appdir ; cp -r "$INSTALL_PREFIX" appdir/usr
        wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases -O - | grep "appimagetool-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2)
        chmod +x appimagetool-*.AppImage
        ./appimagetool-*.AppImage -s deploy appdir/usr/share/applications/*.desktop --appimage-extract-and-run # Bundle EVERYTHING
        sed -i -e 's|/usr||g' appdir/lib/x86_64-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders.cache # https://github.com/probonopd/go-appimage/issues/56
        VERSION="${GITHUB_RUN_NUMBER}".git-"${GITHUB_SHA:0:7}" ./appimagetool-*.AppImage appdir --appimage-extract-and-run # turn AppDir into AppImage
  
    - name: Release AppImage
      uses: marvinpinto/action-automatic-releases@latest
      with:
        title: AppImage
        automatic_release_tag: continuous
        prerelease: true
        draft: false
        files: |
          Glimpse*.AppImage*
        repo_token: ${{ secrets.GITHUB_TOKEN }}
